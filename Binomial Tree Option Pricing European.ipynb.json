{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binomial Tree Option Pricing (v1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An introduction to the underlying theory. Taken from: https://en.wikipedia.org/wiki/Binomial_options_pricing_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We make the following assumptions for the binomial tree option pricing: $$$$\n",
    "- daily continuous growth rates for the underlying stock are normally distributed $ N \\left(0, \\sigma ^ 2 \\right) $\n",
    "- the stock price is a discrete time-step process, and at each time-step the price either increases or decreases\n",
    "- (saying the same as above) the process is an Ito Process with an $ \\alpha$ of 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**DIFFERENCE BETWEEN AMERICAN AND EUROPEAN CALL OPTIONS:**\n",
    "- the option for early exercise is non-existant for European options, but you are able to do that for American options"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each iteration, the option value can go up or down according to the following:\n",
    "\n",
    "$$ S_{u} = u \\times S_{0} $$\n",
    "$$ S_{d} = d \\times S_{0} $$\n",
    "\n",
    "where $u$ and $d$ are the ratios by which the option value either increases or decreases and\n",
    "\n",
    "$$ d = \\frac{1}{u} $$ \n",
    "\n",
    "By using the volatility, $ \\sigma $, we can calculate the $u$ and $d$ values after a certain time-step $\\Delta T$:\n",
    "\n",
    "$$ u = e^{\\sigma \\sqrt{\\Delta T}} $$\n",
    "and from above\n",
    "\n",
    "$$ d = e^{-\\sigma \\sqrt{\\Delta T}} $$\n",
    "\n",
    "Due to the recombination property of this binomial tree, we can find the value of any final time iteration node by the following formula:\n",
    "\n",
    "$$ S_{i} = S_{0} \\times u^{N_{u} - N_{d}} $$\n",
    "\n",
    "where $ N_{u} $ is the number of up steps and $ N_{d} $ is the number of down steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The value of the option at each node is either:\n",
    "\n",
    "$$ Call:  max(S_{n} - K, 0) $$\n",
    "$$ Put:   max(K - S_{n},0) $$\n",
    "\n",
    "where $K$ is the strike price and $S_{n}$ is the value of the underlying option or asset at the $ n^{th} $ time iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under the risk-neutrality assumption: today's price of a derivative is equal to the expected payoff at a future time discounted by the risk-free rate $ r $\n",
    "\n",
    "We can use the following formula: (think of expected value calculation same as random walk E(x))\n",
    "\n",
    "$$ C_{t - \\Delta t, i} = e^{- r \\Delta t} \\left( p C_{u,i} + (1 - p) C_{d,i+1} \\right) $$\n",
    "\n",
    "where $C_{d}$ and $C_{u} $ are the values of the options in the future after it has gone up or down in value and $ C_{t,i} $ is the option's value for the $i^{th}$ iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$p$ is calculated by using the following formula:\n",
    "\n",
    "$$ p = \\frac{e^{(r-q) \\Delta t} - d}{u - d} $$\n",
    "\n",
    "where $ q $ is the dividend yield"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nList of variables:\\n\\nN - number of time intervals\\nT - time until maturity\\nS0 - initial stock price\\nsigma - volatility\\nr - risk free interest rate\\nK - strike price\\ncall_option -   True: if a CALL option\\n                False: if a PUT option\\narray_out - True: stock price tree and option price tree will be returned\\n            False: price (of call option) ONLY will be returned\\n\\n'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "List of variables:\n",
    "\n",
    "N - number of time intervals\n",
    "T - time until maturity\n",
    "S0 - initial stock price\n",
    "sigma - volatility\n",
    "r - risk free interest rate\n",
    "K - strike price\n",
    "call_option -   True: if a CALL option\n",
    "                False: if a PUT option\n",
    "array_out - True: stock price tree and option price tree will be returned\n",
    "            False: price (of call option) ONLY will be returned\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binomial_tree_pricer(N, T, S0, sigma, r, K, call_option=True, array_out=False):\n",
    "\n",
    "    #  defining some variables\n",
    "    dt = T/N\n",
    "    u = np.exp(sigma * np.sqrt(dt))\n",
    "    d = 1/u\n",
    "    p = (np.exp(r*dt) - d)/(u - d)\n",
    "\n",
    "    #  Price tree will be stored in a triangular matrix\n",
    "    price_tree = np.zeros([N+1,N+1])\n",
    "\n",
    "    for i in range(N+1):  #  iterating through the columns\n",
    "        for j in range(i+1):     #  iterating through the rows\n",
    "            price_tree[j,i] = S0 * (u ** (i - j)) * (d ** j)\n",
    " \n",
    "    #  Option value\n",
    "    option = np.zeros([N+1,N+1])\n",
    "    \n",
    "    if call_option:\n",
    "        option[:, N] = np.maximum(np.zeros(N+1),price_tree[:, N] - K)\n",
    "    else:\n",
    "        option[: N] = np.maximum(np.zeros(N+1),K - price_tree[:,N])\n",
    "\n",
    "    #  Calculating the option price at t = 0\n",
    "    for i in np.arange(N-1, -1, -1):\n",
    "        for j in np.arange(0, i+1):\n",
    "            option[j, i] = np.exp(dt * -r) * (p * option[j, i+1] + (1 - p) * option[j+1, i+1])\n",
    "    \n",
    "    if array_out:\n",
    "        return [option[0, 0], price_tree, option,p]\n",
    "    else:\n",
    "        return option[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[7.01218539706381,\n",
       " array([[100.        , 105.9434237 , 112.24009024, 118.91099436],\n",
       "        [  0.        ,  94.39000224, 100.        , 105.9434237 ],\n",
       "        [  0.        ,   0.        ,  89.09472523,  94.39000224],\n",
       "        [  0.        ,   0.        ,   0.        ,  84.09651314]]),\n",
       " array([[ 7.0121854 ,  9.96048794, 13.89294486, 18.91099436],\n",
       "        [ 0.        ,  2.28912331,  3.68852677,  5.9434237 ],\n",
       "        [ 0.        ,  0.        ,  0.        ,  0.        ],\n",
       "        [ 0.        ,  0.        ,  0.        ,  0.        ]]),\n",
       " 0.6310365138396223]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binomial_tree_pricer(N = 3, T=1, S0=100, sigma=0.1, r=0.05, K=100, call_option=True, array_out=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
